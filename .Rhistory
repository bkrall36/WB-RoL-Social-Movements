theme(legend.position="bottom", legend.title=element_blank(), plot.title = element_text(hjust = 0.5)) +
scale_fill_manual("group", values = c("Visited" = "#2F4F4F", "Never Visited" = "#DCDCDC"))
# Note: The figure presents the effect of Chief Justice visits to districts of Pakistan
# before 2008 elections on the share of votes in # favor of the PML party in 2008
# provincial and national elections (compared to 2002 elections). The vertical lines
# reflect the 95% confidence intervals.
# Summarize and save as a table to graph
pml_table <- df_02_08 %>%
filter((Year == 2002 | 2008), `Party Initials` == 'PML') %>%
group_by(Year,`Treated before 2008 elections`) %>%
summarize(
'Percentage of Vote Share' = mean(Vote_Share.1)
)
# Reshape the table to wide format
pml_table <- spread(pml_table, key = "Treated before 2008 elections", value = 'Percentage of Vote Share')
# Transpose the table, remove the first row, and save as df object
pml_table <- t(pml_table)
pml_table <- pml_table[-1,]
pml_table <- as.data.frame(pml_table)
# Create a difference column
pml_table <- pml_table %>%
mutate(
Difference = pml_table$V2 - pml_table$V1
)
# Rename columns and rows
colnames(pml_table) <- c(2002, 2008, 'Difference')
rownames(pml_table) <- c("Unvisited Districts", "Visited Districts")
print(pml_table)
# Subset data for PML
pmln_bar <- df_02_08_bargraphs %>%
filter(`Party Initials` == 'PML-N')
# Create bar chart for PML
ggplot(data = pmln_bar, aes(x=factor(Year), y=mean, groups=group, fill=group)) +
geom_bar(colour='black', width=0.50, stat='identity', position=position_dodge(0.5)) +
geom_errorbar(aes(x=factor(Year), ymin=mean-ic, ymax=mean+ic), width=0.25, colour="#778899", alpha=1, size=1, position=position_dodge(0.5)) +
ggtitle('Impact of CJ visits on Party Pledging Support for Lawyers Movment - PML-N') +
labs(y= "Vote Share (%)", x = '') +
theme_light() +
theme(legend.position="bottom", legend.title=element_blank(), plot.title = element_text(hjust = 0.5)) +
scale_fill_manual("group", values = c("Visited" = "#2F4F4F", "Never Visited" = "#DCDCDC"))
# Note: The figure presents the effect of Chief Justice visits to districts of Pakistan
# before 2008 elections on the share of votes in # favor of PML-N party in 2008
# provincial and national elections (compare to 2002 elections). The vertical lines
# reflect the 95% confidence intervals.
pmln_table <- df_02_08 %>%
filter((Year == 2002 | 2008), `Party Initials` == 'PML-N') %>%
group_by(Year,`Treated before 2008 elections`) %>%
summarize(
'Percentage of Vote Share' = mean(Vote_Share.1)
)
# Reshape the table to wide format
pmln_table <- spread(pmln_table, key = "Treated before 2008 elections", value = 'Percentage of Vote Share')
# Transpose the table, remove the first row, and save as df object
pmln_table <- t(pmln_table)
pmln_table <- pmln_table[-1,]
pmln_table <- as.data.frame(pmln_table)
# Create a difference column
pmln_table <- pmln_table %>%
mutate(
Difference = pmln_table$V2 - pmln_table$V1
)
# Rename columns and rows
colnames(pmln_table) <- c(2002, 2008, 'Difference')
rownames(pmln_table) <- c("Unvisited Districts", "Visited Districts")
print(pmln_table)
# Subset data for PML
pppp_bar <- df_02_08_bargraphs %>%
filter(`Party Initials` == 'PPPP')
# Create bar chart for PML
ggplot(data = pppp_bar, aes(x=factor(Year), y=mean, groups=group, fill=group)) +
geom_bar(colour='black', width=0.50, stat='identity', position=position_dodge(0.5)) +
geom_errorbar(aes(x=factor(Year), ymin=mean-ic, ymax=mean+ic), width=0.25, colour="#778899", alpha=1, size=1, position=position_dodge(0.5)) +
ggtitle('Impact of CJ visits on Nuetral Opposition Party - PPP') +
labs(y= "Vote Share (%)", x = '') +
theme_light() +
theme(legend.position="bottom", legend.title=element_blank(), plot.title = element_text(hjust = 0.5)) +
scale_fill_manual("group", values = c("Visited" = "#2F4F4F", "Never Visited" = "#DCDCDC"))
# Note: The figure presents the effect of Chief Justice visits to districts of Pakistan
# before 2008 elections on the share of votes in # favor of PPP party in 2008 provincial
# and national elections (compared to 2002 elections). The vertical lines reflect the
# 95% confidence intervals.
pppp_table <- df_02_08 %>%
filter((Year == 2002 | 2008), `Party Initials` == 'PPPP') %>%
group_by(Year,`Treated before 2008 elections`) %>%
summarize(
'Percentage of Vote Share' = mean(Vote_Share.1)
)
# Reshape the table to wide format
pppp_table <- spread(pppp_table, key = "Treated before 2008 elections", value = 'Percentage of Vote Share')
# Transpose the table, remove the first row, and save as df object
pppp_table <- t(pppp_table)
pppp_table <- pppp_table[-1,]
pppp_table <- as.data.frame(pppp_table)
# Create a difference column
pppp_table <- pppp_table %>%
mutate(
Difference = pppp_table$V2 - pppp_table$V1
)
# Rename columns and rows
colnames(pppp_table) <- c(2002, 2008, 'Difference')
rownames(pppp_table) <- c("Unvisited Districts", "Visited Districts")
print(pppp_table)
# Subset data for ease of manipulation
df_subset <- df %>% select(c(Year, Vote_Share.1, 'Party Initials', Treated))
# Rename for clarity
df_subset <- df_subset %>%
mutate(
Treated = ifelse(Treated == 1, 'Visited', 'Never Visted')
)
# Parallel Trend for PML
df_subset %>%
filter(`Party Initials` == 'PML') %>%
ggplot(aes(x = Year, y = Vote_Share.1, color = Treated)) +
stat_summary(fun.y = mean, geom = 'line', size = 1.25) +
theme_bw() +
labs(x = "Year", y = "% of Vote Share", title = "Evolution of Vote Share - PML (Years 1970 to 2012)") +
geom_vline(xintercept = 2007) +
scale_color_manual('Treated', values = c("Visited" = "#2F4F4F", "Never Visited" = "#DCDCDC")) +
theme(legend.position="bottom", legend.title=element_blank(), plot.title = element_text(hjust = 0.5))
# Parallel Trend for PML-N
df_subset %>%
filter(`Party Initials` == 'PML-N') %>%
ggplot(aes(x = Year, y = Vote_Share.1, color = Treated)) +
stat_summary(fun.y = mean, geom = 'line', size = 1.25) +
theme_bw() +
labs(x = "Year", y = "% of Vote Share", title = "Evolution of Vote Share - PML-N (Years 1992 to 2012)") +
geom_vline(xintercept = 2007) +
scale_color_manual('Treated', values = c("Visited" = "#2F4F4F", "Never Visited" = "#DCDCDC")) +
theme(legend.position="bottom", legend.title=element_blank(), plot.title = element_text(hjust = 0.5))
# Parallel Trend for PPPP
df_subset %>%
filter(`Party Initials` == 'PPPP') %>%
ggplot(aes(x = Year, y = Vote_Share.1, color = Treated)) +
stat_summary(fun.y = mean, geom = 'line', size = 1.25) +
theme_bw() +
labs(x = "Year", y = "% of Vote Share", title = "Evolution of Vote Share - PPP (Years 2002 to 2012)") +
geom_vline(xintercept = 2007) +
scale_color_manual('Treated', values = c("Visited" = "#2F4F4F", "Never Visited" = "#DCDCDC")) +
theme(legend.position="bottom", legend.title=element_blank(), plot.title = element_text(hjust = 0.5))
# Construct a variable that, for treated units, will take the value of the
# number of years leading up to it (+3,-3). For untreated units, or treated
# units that will be treated 3 or more years in the future,it takes the value -4
df$time_since_treatment = ifelse(!is.na(df$`1st_visit_year`) & (df$Year-df$`1st_visit_year`>=-3) & (df$Year-df$`1st_visit_year`<=3),df$Year-df$`1st_visit_year`,-4)
# For treated units, after 3 years, this variable will have the value 4
df$time_since_treatment = ifelse(!is.na(df$`1st_visit_year`) & (df$Year-df$`1st_visit_year`>3),4,df$time_since_treatment)
event_study_reg <- lm(Vote_Share.1 ~ factor(time_since_treatment) + constituency_dummy + year_dummy + count, data = df)
# cluster-robust SEs for event study
cl.cov.event <- cluster.vcov(event_study_reg, df$`PA ID`)
View(df_02_08)
cl.robust.se.event <- sqrt(diag(cl.cov.event))
stargazer(event_study_reg, type="text", keep=c("Constant","time_since_treatment"), se = list(cl.robust.se.event), notes = c("Robust standard errors appear in brackets (clustered at the district level)."), notes.align = "l")
# Store the beta coefficients as X and Y pairs for plotting
summary <- as.data.frame(event_study_reg$coefficients)
y <- as.data.frame(summary[2:4,])
x <- as.data.frame(c(-1, 0, 1))
# Generate CI at 95% level for time_since_treatment variable
cis <- confint(event_study_reg, level=0.95)
cis <- cis[2:4, ]
# Create dataframe for plotting
combined_df <- cbind(x, y, cis)
ggplot(combined_df, aes(x=`c(-1, 0, 1)`, y=`summary[2:4, ]`)) +
geom_pointrange(aes(ymin=`2.5 %`, ymax=`97.5 %`)) +
labs(x='Time to Treatment (years)', y='Effect Size (pp of Vote Share)', title='Average Treatment Effect of CJ Visit') +
geom_line() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
df_treated <- df %>%
filter(treated == 1)
View(df_treated)
# Create Year Fixed-Effect Variable
df$year_dummy <- factor(df$Year)
# Create Constituency Fixed-Effect Variable
df$constituency_dummy <- factor(df$`PA ID`)
# Create Treated 2008 and 2013 variable
df <- df %>% mutate(
treated = ifelse((`1st_visit_year`<= Year), 1, 0)
)
# Create Visits 2008 and 2013 variable Counts
#df <- df %>% mutate(
#  treated_2008_n = ifelse((Year == 2008 & Treated == 1), 'Visits before 2008 elections', 0),
#  treated_2013_n = ifelse((Year == 2013 & Treated == 1), 'N_visits', 0)
#)
# Remove observations with NA values for our outcome variable
df <- df %>% filter(!is.na(Vote_Share))
df_treated <- df %>%
filter(Treated == 1)
View(df_treated)
df_treated <- df %>%
filter(Treated == 1) %>%
select(districts)
View(df_treated)
df_treated <- df %>%
filter(Treated == 1) %>%
select(districts) %>%
distinct()
View(df_treated)
print(df_treated)
list_treated <- list(df_treated)
View(list_treated)
paste(df_treated,collapse=" ")
paste(list_treated,collapse=" ")
df_treated <- df %>%
filter(Treated == 1) %>%
select(districts) %>%
distinct()
View(df_treated)
df_treated <- df %>%
filter(Treated == 1) %>%
select(districts) %>%
distinct() %>%
drop_na()
View(df_treated)
list <- paste(df_treated,collapse=" ")
View(list_treated)
print(list)
treated_districts <- c("Peshawar", "Rawalpindi", "Attock", "Jhelum", "Gujrat", "Sargodha", "Faisalabad", "Lahore", "Gujranwala", "Sialkot", "Multan", "Dera Ghazi Khan", "Muzaffargarh", "Sahiwal", "Bahawalpur", "Sukkur", "Larkana", "Shaheed Benazirabad", "Khairpur", "Hyderabad", "Karachi", "Quetta", "Abbottabad", "Okara", "Chakwal", "Khanewal", "Naushehro Feroze", "Hafizabad", "Haripur", "Matiari", "Islamabad", "Chiniot")
rm(list=ls()) # Clear working memory
library(readxl) # Load Excel files
library(magrittr) # Make all colnames lower case with no spaces
library(stringr) # String formatting and replacement
library(dplyr) # Data wrangling and manipulation
library(ggplot2) # Data visualization
library(tidyr) # Nesting and unnesting dataframes
library(purrr) # Map all function
library(broom) # Multiple linear regressions
library(lmtest) # Run linear regressions with robust standard errors
library(multiwayvcov) # Generate robust standard
library(sandwich) # Generate robust standard errors
library(stargazer) # Good way to report regression reports
setwd("C:/Users/brend/OneDrive/Documents/GitHub/WB-RoL-Social-Movements")
pslmdf <- read_excel("PSLM Data.xlsx", sheet = 1)
setwd("C:/Users/brend/OneDrive/Documents/GitHub/WB-RoL-Social-Movements")
pslmdf <- read_excel("PSLM Data.xlsx", sheet = 1)
# Subset first three rows and remove them from dataframe
pslmdf_first3 <- pslmdf[, 1:3]
pslmdf <- pslmdf[, -c(1:3)]
# Store column names and then store columns with names
cnames <- colnames(pslmdf)
cnames <- cnames[seq(1, length(cnames), 9)]
# Remove row of metadata
pslmdf_first3 <- pslmdf_first3[-1,]
pslmdf <- pslmdf[-1,]
# Select column observations with totals only
pslmdf <- pslmdf[seq_len(ncol(pslmdf)) %% 9 == 0]
# Rename total columns manually and using stored column names
colnames(pslmdf_first3) <- c('year', 'province_id', 'name')
colnames(pslmdf) <- cnames
# Add first three rows back
pslmdf <- cbind(pslmdf_first3, pslmdf)
View(pslmdf)
# Create a treated dummy column
pslmdf <- pslmdf %>%
mutate(
treated = ifelse(name %in% treated_districts, 1, 0)
)
# Create a list that contains districts that were visited by chief justice
treated_districts <- c("Peshawar", "Rawalpindi", "Attock", "Jhelum", "Gujrat", "Sargodha", "Faisalabad", "Lahore", "Gujranwala", "Sialkot", "Multan", "Dera Ghazi Khan", "Muzaffargarh", "Sahiwal", "Bahawalpur", "Sukkur", "Larkana", "Shaheed Benazirabad", "Khairpur", "Hyderabad", "Karachi", "Quetta", "Abbottabad", "Okara", "Chakwal", "Khanewal", "Naushehro Feroze", "Hafizabad", "Haripur", "Matiari", "Islamabad", "Chiniot")
# Create a treated dummy column
pslmdf <- pslmdf %>%
mutate(
treated = ifelse(name %in% treated_districts, 1, 0)
)
View(pslmdf)
# Subset the data for the control groups
pslmdf_control <- pslmdf %>%
filter(treated == 0)
# Subset the data for the treatment groups
pslmdf_treatment <- pslmdf %>%
filter(sekowifi_winner == 1)
# Subset the data for the treatment groups
pslmdf_treatment <- pslmdf %>%
filter(treated == 1)
View(pslmdf_treatment)
View(pslmdf_control)
View(pslmdf)
View(pslmdf_treatment)
# Create a list that contains districts that were visited by chief justice
treated_districts <- c("Peshawar", "Rawalpindi", "Attock", "Jhelum", "Gujrat", "Sargodha", "Faisalabad", "Lahore", "Gujranwala", "Sialkot", "Multan", "Dera Ghazi Khan", "Muzaffargarh", "Sahiwal", "Bahawalpur", "Sukkur", "Larkana", "Shaheed Benazirabad", "Khairpur", "Hyderabad", "Karachi", "Quetta", "Abbottabad", "Okara", "Chakwal", "Khanewal", "Naushehro Feroze", "Hafizabad", "Haripur", "Matiari", "Islamabad", "Chiniot")
# Create a treated dummy column
pslmdf <- pslmdf %>%
mutate(
treated = ifelse(name %in% treated_districts, 1, 0)
)
# Subset the data for the control groups
pslmdf_control <- pslmdf %>%
filter(treated == 0)
# Subset the data for the treatment groups
pslmdf_treated <- pslmdf %>%
filter(treated == 1)
# De-identify districts and compute aggregate measures for balance table
# De-identify districts and compute aggregate measures for balance table
pslmdf_treated <- pslmdf_treated[, -1:3]
# De-identify districts and compute aggregate measures for balance table
pslmdf_treated <- pslmdf_treated[, -c(1:3)]
View(pslmdf_treated)
pslmdf_control <- pslmdf_control[, -c(1:3)]
View(pslmdf_control)
colMeans(pslmdf_treated)
colMeans(pslmdf_treated)
sapply(pslmdf_treated, class)
sapply(pslmdf_treated, as.numeric())
sapply(pslmdf_treated, as.numeric)
View(pslmdf_treated)
sapply(pslmdf_treated, class)
sapply(pslmdf_treated, as.numeric)
pslmdf_treated[] <- sapply(pslmdf_treated, as.numeric)
View(pslmdf_treated)
sapply(pslmdf_treated, class)
pslmdf_control[] <- sapply(pslmdf_control, as.numeric)
# Compute aggregate measures for balance table
print(colMeans(pslmdf_control))
# Compute aggregate measures for balance table
control_means <- colMeans(pslmdf_control)
# Compute aggregate measures for balance table
control_means <- as.data.frame(colMeans(pslmdf_control))
View(control_means)
treated_means <- as.data.frame(colMeans(pslmdf_treatment))
# Ensure datatype of columns are numeric
pslmdf_treated[] <- sapply(pslmdf_treated, as.numeric)
treated_means <- as.data.frame(colMeans(pslmdf_treated))
View(treated_means)
means_df <- cbind(control_means, treated_means)
View(means_df)
means_df <- means_df %>% select(-treated)
View(means_df)
means_df <- means_df %>% select(c(-treated))
View(means_df)
means_df <- means_df %>% filter(row_number() <= n()-1)
View(means_df)
means_df <- means_df %>% filter(row_number() <= n()-3)
# Create a list that contains districts that were visited by chief justice
treated_districts <- c("Peshawar", "Rawalpindi", "Attock", "Jhelum", "Gujrat", "Sargodha", "Faisalabad", "Lahore", "Gujranwala", "Sialkot", "Multan", "Dera Ghazi Khan", "Muzaffargarh", "Sahiwal", "Bahawalpur", "Sukkur", "Larkana", "Shaheed Benazirabad", "Khairpur", "Hyderabad", "Karachi", "Quetta", "Abbottabad", "Okara", "Chakwal", "Khanewal", "Naushehro Feroze", "Hafizabad", "Haripur", "Matiari", "Islamabad", "Chiniot")
# Create a treated dummy column
pslmdf <- pslmdf %>%
mutate(
treated = ifelse(name %in% treated_districts, 1, 0)
)
# Subset the data for the control groups
pslmdf_control <- pslmdf %>%
filter(treated == 0)
# Subset the data for the treatment groups
pslmdf_treated <- pslmdf %>%
filter(treated == 1)
# De-identify districts
pslmdf_treated <- pslmdf_treated[, -c(1:3)]
pslmdf_control <- pslmdf_control[, -c(1:3)]
# Ensure datatype of columns are numeric
pslmdf_treated[] <- sapply(pslmdf_treated, as.numeric)
pslmdf_control[] <- sapply(pslmdf_control, as.numeric)
# Compute aggregate measures for balance table
control_means <- as.data.frame(colMeans(pslmdf_control))
treated_means <- as.data.frame(colMeans(pslmdf_treated))
# Combine measures and remove unnecessary row observations
means_df <- cbind(control_means, treated_means)
means_df <- means_df %>% filter(row_number() <= n()-3)
View(means_df)
# Create a list that contains districts that were visited by chief justice
treated_districts <- c("Peshawar", "Rawalpindi", "Attock", "Jhelum", "Gujrat", "Sargodha", "Faisalabad", "Lahore", "Gujranwala", "Sialkot", "Multan", "Dera Ghazi Khan", "Muzaffargarh", "Sahiwal", "Bahawalpur", "Sukkur", "Larkana", "Shaheed Benazirabad", "Khairpur", "Hyderabad", "Karachi", "Quetta", "Abbottabad", "Okara", "Chakwal", "Khanewal", "Naushehro Feroze", "Hafizabad", "Haripur", "Matiari", "Islamabad", "Chiniot")
# Create a treated dummy column
pslmdf <- pslmdf %>%
mutate(
treated = ifelse(name %in% treated_districts, 1, 0)
)
# Subset the data for the control groups
pslmdf_control <- pslmdf %>%
filter(treated == 0)
# Subset the data for the treatment groups
pslmdf_treated <- pslmdf %>%
filter(treated == 1)
# De-identify districts
pslmdf_treated <- pslmdf_treated[, -c(1:3)]
pslmdf_control <- pslmdf_control[, -c(1:3)]
# Ensure datatype of columns are numeric
pslmdf_treated[] <- sapply(pslmdf_treated, as.numeric)
pslmdf_control[] <- sapply(pslmdf_control, as.numeric)
# Compute aggregate measures for balance table
control_means <- as.data.frame(colMeans(pslmdf_control))
treated_means <- as.data.frame(colMeans(pslmdf_treated))
# Combine measures and remove unnecessary row observations
means_df <- cbind(control_means, treated_means)
means_df <- means_df %>% filter(row_number() <= n()-4)
View(means_df)
# Create a list that contains districts that were visited by chief justice
treated_districts <- c("Peshawar", "Rawalpindi", "Attock", "Jhelum", "Gujrat", "Sargodha", "Faisalabad", "Lahore", "Gujranwala", "Sialkot", "Multan", "Dera Ghazi Khan", "Muzaffargarh", "Sahiwal", "Bahawalpur", "Sukkur", "Larkana", "Shaheed Benazirabad", "Khairpur", "Hyderabad", "Karachi", "Quetta", "Abbottabad", "Okara", "Chakwal", "Khanewal", "Naushehro Feroze", "Hafizabad", "Haripur", "Matiari", "Islamabad", "Chiniot")
# Create a treated dummy column
pslmdf <- pslmdf %>%
mutate(
treated = ifelse(name %in% treated_districts, 1, 0)
)
# Subset the data for the control groups
pslmdf_control <- pslmdf %>%
filter(treated == 0)
# Subset the data for the treatment groups
pslmdf_treated <- pslmdf %>%
filter(treated == 1)
# De-identify districts
pslmdf_treated <- pslmdf_treated[, -c(1:3)]
pslmdf_control <- pslmdf_control[, -c(1:3)]
# Ensure datatype of columns are numeric
pslmdf_treated[] <- sapply(pslmdf_treated, as.numeric)
pslmdf_control[] <- sapply(pslmdf_control, as.numeric)
# Compute aggregate measures for balance table
control_means <- as.data.frame(colMeans(pslmdf_control))
treated_means <- as.data.frame(colMeans(pslmdf_treated))
# Combine measures and remove unnecessary row observations
means_df <- cbind(control_means, treated_means)
#means_df <- means_df %>% filter(row_number() <= n()-4)
# Create a list that contains districts that were visited by chief justice
treated_districts <- c("Peshawar", "Rawalpindi", "Attock", "Jhelum", "Gujrat", "Sargodha", "Faisalabad", "Lahore", "Gujranwala", "Sialkot", "Multan", "Dera Ghazi Khan", "Muzaffargarh", "Sahiwal", "Bahawalpur", "Sukkur", "Larkana", "Shaheed Benazirabad", "Khairpur", "Hyderabad", "Karachi", "Quetta", "Abbottabad", "Okara", "Chakwal", "Khanewal", "Naushehro Feroze", "Hafizabad", "Haripur", "Matiari", "Islamabad", "Chiniot")
# Create a treated dummy column
pslmdf <- pslmdf %>%
mutate(
treated = ifelse(name %in% treated_districts, 1, 0)
)
# Subset the data for the control groups
pslmdf_control <- pslmdf %>%
filter(treated == 0)
# Subset the data for the treatment groups
pslmdf_treated <- pslmdf %>%
filter(treated == 1)
# De-identify districts
pslmdf_treated <- pslmdf_treated[, -c(1:3)]
pslmdf_control <- pslmdf_control[, -c(1:3)]
# Ensure datatype of columns are numeric
pslmdf_treated[] <- sapply(pslmdf_treated, as.numeric)
pslmdf_control[] <- sapply(pslmdf_control, as.numeric)
# Compute aggregate measures for balance table
control_means <- as.data.frame(colMeans(pslmdf_control))
treated_means <- as.data.frame(colMeans(pslmdf_treated))
# Combine measures and remove unnecessary row observations
means_df <- cbind(control_means, treated_means)
means_df <- means_df %>% filter(row_number() <= n()-4)
# Calculate the p-values baseline differences in means using for loop
for (i in 1:24){
pval[i] <- t.test(means_df[, i], means_df[, i],
alternative = 'two.sided',
var.equal = FALSE)$p.val
}
# Create p-value vector to store values from for loop
pval <- c()
# Calculate the p-values baseline differences in means using for loop
for (i in 1:24){
pval[i] <- t.test(means_df[, i], means_df[, i],
alternative = 'two.sided',
var.equal = FALSE)$p.val
}
# Calculate the p-values baseline differences in means using for loop
for (i in 1:24){
pval[i] <- t.test(means_df$`colMeans(pslmdf_control)`[i,], means_df$`colMeans(pslmdf_treated)`[i,],
alternative = 'two.sided',
var.equal = FALSE)$p.val
}
# Calculate the p-values baseline differences in means using for loop
for (i in 1:24){
pval[i] <- t.test(means_df$`colMeans(pslmdf_control)`[i], means_df$`colMeans(pslmdf_treated)`[i],
alternative = 'two.sided',
var.equal = FALSE)$p.val
}
View(pslmdf_treated)
# Create a list that contains districts that were visited by chief justice
treated_districts <- c("Peshawar", "Rawalpindi", "Attock", "Jhelum", "Gujrat", "Sargodha", "Faisalabad", "Lahore", "Gujranwala", "Sialkot", "Multan", "Dera Ghazi Khan", "Muzaffargarh", "Sahiwal", "Bahawalpur", "Sukkur", "Larkana", "Shaheed Benazirabad", "Khairpur", "Hyderabad", "Karachi", "Quetta", "Abbottabad", "Okara", "Chakwal", "Khanewal", "Naushehro Feroze", "Hafizabad", "Haripur", "Matiari", "Islamabad", "Chiniot")
# Create a treated dummy column
pslmdf <- pslmdf %>%
mutate(
treated = ifelse(name %in% treated_districts, 1, 0)
)
# Subset the data for the control groups
pslmdf_control <- pslmdf %>%
filter(treated == 0)
# Subset the data for the treatment groups
pslmdf_treated <- pslmdf %>%
filter(treated == 1)
# De-identify districts
pslmdf_treated <- pslmdf_treated[, -c(1:3)]
pslmdf_control <- pslmdf_control[, -c(1:3)]
# Ensure datatype of columns are numeric
pslmdf_treated[] <- sapply(pslmdf_treated, as.numeric)
pslmdf_control[] <- sapply(pslmdf_control, as.numeric)
# Compute aggregate measures for balance table
control_means <- as.data.frame(colMeans(pslmdf_control))
treated_means <- as.data.frame(colMeans(pslmdf_treated))
# Combine measures and remove unnecessary row observations
means_df <- cbind(control_means, treated_means)
means_df <- means_df %>% filter(row_number() <= n()-4)
# Create p-value vector to store values from for loop
pval <- c()
# Calculate the p-values baseline differences in means using for loop
for (i in 1:24){
pval[i] <- t.test(pslmdf_control[,i], pslmdf_treated[,i],
alternative = 'two.sided',
var.equal = FALSE)$p.val
}
balance_tbl <- cbind(means_df, pval)
View(balance_tbl)
View(pslmdf_treatment)
View(pslmdf_treated)
View(balance_tbl)
colnames(balance_tbl) <- c('Measure', "Univisited District Means", "Visited District Means", "P-Value")
colnames(balance_tbl) <- c("Univisited District Means", "Visited District Means", "P-Value")
balance_tbl <- balance_tbl %>%
mutate(
'Significance Level' = case_when(
pval <= 0.01 ~ "***",
pval <= 0.05 ~ "**",
pval <= 0.1 ~ "*",
pval > 0.1 ~ ""
)
)
colnames(balance_tbl) <- c("Univisited District Means", "Visited District Means", "P-Value")
View(balance_tbl)
colnames(balance_tbl) <- c("Univisited District Means", "Visited District Means", "P-Value", "Significance Level")
View(balance_tbl)
